{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Unit3_FinalProject.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-aDkg8IYpfxS"
      },
      "source": [
        "# Making a CMD for your Star Cluster\n",
        "\n",
        "This notebook introduces a few commands that you'll need to make the Color Magnitude Diagram for your star cluster. You can also use the cells below to write code for your unit project."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cdlCFoIYpfxT"
      },
      "source": [
        "## .loc[ ] indexing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CcUJ8BQFpfxU"
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 260
        },
        "id": "1Wo4VNL8pfxX",
        "outputId": "7428a5e6-7dac-4c01-e320-e2c8a2c18be4"
      },
      "source": [
        "# Here we create a sample dataframe\n",
        "sample_df = pd.DataFrame({\"Smartphone\": [\"iPhone 11\", \"Samsung Galaxy S20\", \"Google Pixel 4\", \"LG V60\", \"Nokia 9\", \"Sony Xperia 1\", \"iPhone SE\"], \"Price\": [700,1000,800,700,450,1000,399]})\n",
        "sample_df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Smartphone</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>iPhone 11</td>\n",
              "      <td>700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Samsung Galaxy S20</td>\n",
              "      <td>1000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Google Pixel 4</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LG V60</td>\n",
              "      <td>700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Nokia 9</td>\n",
              "      <td>450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Sony Xperia 1</td>\n",
              "      <td>1000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>iPhone SE</td>\n",
              "      <td>399</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           Smartphone  Price\n",
              "0           iPhone 11    700\n",
              "1  Samsung Galaxy S20   1000\n",
              "2      Google Pixel 4    800\n",
              "3              LG V60    700\n",
              "4             Nokia 9    450\n",
              "5       Sony Xperia 1   1000\n",
              "6           iPhone SE    399"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MPN4-t4upfxa"
      },
      "source": [
        "You can use the .loc index method to select all the items in one column which have a particular value in the second column. For example, we may want to select all items from the \"Smartphone\" column that have a value of 700 in the \"Price\" column.\n",
        "\n",
        "\n",
        "Follow along with the **live coding activity** to see how this works."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fu9h0yPKpfxb",
        "outputId": "3568434a-6ea7-4942-c74d-af0944f235eb"
      },
      "source": [
        "# This code selects all values from the first column, \"Smartphone\" where the value on that same row in the second column, \"Price\" is equal to 700\n",
        "sample_df[\"Smartphone\"].loc[sample_df[\"Price\"] == 700]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    iPhone 11\n",
              "3       LG V60\n",
              "Name: Smartphone, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CIYEkA3Wpfxd"
      },
      "source": [
        "Now you try! Let's say you want to view some more expensive phones. Select all the values from the \"Smartphone\" column where the value on that same row in the \"Price\" column is equal to 1000."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O0PvGdTNpfxd",
        "outputId": "e9edf3a4-a6c3-4805-e1ff-fc13391cefa1"
      },
      "source": [
        "sample_df[\"Smartphone\"].loc[sample_df[\"Price\"] == 1000]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    Samsung Galaxy S20\n",
              "5         Sony Xperia 1\n",
              "Name: Smartphone, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jzvDK1QEpfxg"
      },
      "source": [
        "Let's say you definitely want an iPhone of some sort, but you want to see just iPhone prices. Now select all the values from the \"Price\" column where the value on that same row in the \"Smartphone\" column contains the word \"iPhone\"."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bqiRqwcXpfxg",
        "outputId": "17607f3d-c7b6-4575-bb48-fdd6a6d47499"
      },
      "source": [
        "sample_df[\"Price\"].loc[sample_df[\"Smartphone\"].str.contains(\"iPhone\")]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    700\n",
              "6    399\n",
              "Name: Price, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uMfMtB_zpr3h"
      },
      "source": [
        "Let's say you're on a budget and don't want to spend more than $700 on a phone. Select all the values from the \"Smartphone\" column where the value on that same row in the \"Price\" column is less than or equal to 700."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7TGx3Hxopq8Z"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "utqMyj5_pfxj"
      },
      "source": [
        "#### Note: You can store these selected values in a variable, just like you've done with entire columns!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GP9SqxKvpfxj"
      },
      "source": [
        "## Finding absolute magnitude"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JjPICJkepfxj"
      },
      "source": [
        "You will need to convert \"G\" to absolute magnitude for your CMD.\n",
        "\n",
        "Look in the dataset for distance. Using G and distance, you can calculate absolute magnitude using the following equation:\n",
        "\n",
        "absolute magnitude = G - 5 * log(distance) + 5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7xrdzzqdpfxk"
      },
      "source": [
        "# You will need to import numpy\n",
        "import numpy as np\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Emrw3_eevUoN",
        "outputId": "88b6a8d7-ee1e-463d-9b65-8a7ca3f18495"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_11KBn7Epfxn",
        "outputId": "2537ed4f-296b-4994-8cc9-a81a11cea1e1"
      },
      "source": [
        "# You can use this function in your code to find the log of distance:\n",
        "np.log(10)\n",
        "# np.log10()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.302585092994046"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EgbZVvl1vq64"
      },
      "source": [
        "df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/oh_table.csv\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "syhwp-0M21it",
        "outputId": "b375f947-9e45-4705-e62f-0a3571307d00"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>row_id</th>\n",
              "      <th>tgas_source_id</th>\n",
              "      <th>name</th>\n",
              "      <th>ra</th>\n",
              "      <th>dec</th>\n",
              "      <th>parallax</th>\n",
              "      <th>distance</th>\n",
              "      <th>G</th>\n",
              "      <th>J</th>\n",
              "      <th>rave_obs_id</th>\n",
              "      <th>rv</th>\n",
              "      <th>erv</th>\n",
              "      <th>group_id</th>\n",
              "      <th>group_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>659</td>\n",
              "      <td>49809491645958528</td>\n",
              "      <td>TYC 1253-388-1</td>\n",
              "      <td>59.457281</td>\n",
              "      <td>18.562195</td>\n",
              "      <td>7.7395</td>\n",
              "      <td>129.949</td>\n",
              "      <td>11.160</td>\n",
              "      <td>9.984</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>151</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1559</td>\n",
              "      <td>66939848447027584</td>\n",
              "      <td>TYC 1804-1924-1</td>\n",
              "      <td>57.070387</td>\n",
              "      <td>25.214932</td>\n",
              "      <td>7.6087</td>\n",
              "      <td>132.557</td>\n",
              "      <td>9.066</td>\n",
              "      <td>8.137</td>\n",
              "      <td>20120109_0346p23_140</td>\n",
              "      <td>2.95</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0</td>\n",
              "      <td>151</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1904</td>\n",
              "      <td>50905051903831680</td>\n",
              "      <td>HIP 18091</td>\n",
              "      <td>58.003444</td>\n",
              "      <td>19.596690</td>\n",
              "      <td>6.7611</td>\n",
              "      <td>148.752</td>\n",
              "      <td>10.265</td>\n",
              "      <td>9.267</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>151</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1929</td>\n",
              "      <td>51452746133437696</td>\n",
              "      <td>HIP 18544</td>\n",
              "      <td>59.507154</td>\n",
              "      <td>20.676596</td>\n",
              "      <td>7.6989</td>\n",
              "      <td>131.839</td>\n",
              "      <td>9.249</td>\n",
              "      <td>8.436</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>151</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1944</td>\n",
              "      <td>51619115986889472</td>\n",
              "      <td>TYC 1261-1630-1</td>\n",
              "      <td>58.370320</td>\n",
              "      <td>20.907178</td>\n",
              "      <td>7.4847</td>\n",
              "      <td>134.194</td>\n",
              "      <td>11.553</td>\n",
              "      <td>10.096</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>151</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   row_id     tgas_source_id             name  ...  erv  group_id  group_size\n",
              "0     659  49809491645958528   TYC 1253-388-1  ...  NaN         0         151\n",
              "1    1559  66939848447027584  TYC 1804-1924-1  ...  1.6         0         151\n",
              "2    1904  50905051903831680        HIP 18091  ...  NaN         0         151\n",
              "3    1929  51452746133437696        HIP 18544  ...  NaN         0         151\n",
              "4    1944  51619115986889472  TYC 1261-1630-1  ...  NaN         0         151\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T6fD_2OaxC9t",
        "outputId": "a38ecb13-6ad9-432e-9496-da0f9cf61177"
      },
      "source": [
        "G = df[\"G\"]\n",
        "logDistance = np.log10(df[\"distance\"])\n",
        "absoluteMagnitude = G -(5 * logDistance) + 5\n",
        "\n",
        "Color = df[\"G\"] - df[\"J\"]\n",
        "print(Color)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0        1.176\n",
            "1        0.929\n",
            "2        0.998\n",
            "3        0.813\n",
            "4        1.457\n",
            "         ...  \n",
            "10601    0.816\n",
            "10602    1.152\n",
            "10603    1.232\n",
            "10604    0.908\n",
            "10605    0.982\n",
            "Length: 10606, dtype: float64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "66bzd67ipfxp"
      },
      "source": [
        "### Your first task is to create a Color Magnitude Diagram for your star cluster\n",
        "You can use as many of the cells below as you need. You can add new cells with the \"+\" button."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q5rXuczQpfxq"
      },
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NASmTxRTpfxu",
        "outputId": "052b6bb6-6a9d-43d7-88e3-59a10863bd13"
      },
      "source": [
        "abs_mag = G - 5 * logDistance + 5\n",
        "print(abs_mag)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0        5.591135\n",
            "1        3.453987\n",
            "2        4.402686\n",
            "3        3.648780\n",
            "4        5.914335\n",
            "           ...   \n",
            "10601    3.810132\n",
            "10602    5.415899\n",
            "10603    5.540252\n",
            "10604    3.863486\n",
            "10605    3.270939\n",
            "Length: 10606, dtype: float64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WkL3pYhOpfxw",
        "outputId": "77970d2d-ea2c-44ea-f0db-70cf69c2e80d"
      },
      "source": [
        "coma_ber = [df.loc[df[\"group_id\"] == 5]]\n",
        "print(coma_ber)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[     row_id       tgas_source_id             name  ...   erv  group_id  group_size\n",
            "580     431  5251238225402532352  TYC 8968-1227-1  ...   NaN         5          59\n",
            "581     475  5251470943909316096    TYC 8964-17-1  ...   NaN         5          59\n",
            "582     514  5251663495883800448        HIP 51131  ...   NaN         5          59\n",
            "583     560  5251822100435455744        HIP 51794  ...   NaN         5          59\n",
            "584     567  5251845946093877632   TYC 8964-488-1  ...   NaN         5          59\n",
            "585     578  5251880511990665216   TYC 8964-383-1  ...   NaN         5          59\n",
            "586     581  5251888517809705216   TYC 8964-165-1  ...  2.41         5          59\n",
            "587     618  5251991356506637568  TYC 8960-1942-1  ...   NaN         5          59\n",
            "588     648  5252077668171627648  TYC 8960-1957-1  ...   NaN         5          59\n",
            "589     738  5252392884409210624        HIP 50102  ...   NaN         5          59\n",
            "590     797  5252566023132496256   TYC 8947-928-1  ...   NaN         5          59\n",
            "591     990  5253053725257383424   TYC 8960-363-1  ...   NaN         5          59\n",
            "592    1160  5253452057710889216   TYC 8961-383-1  ...  1.35         5          59\n",
            "593    1404  5253965770155144704  TYC 8956-1110-1  ...   NaN         5          59\n",
            "594    3865  5237676539747932032   TYC 8963-853-1  ...   NaN         5          59\n",
            "595    6532  5232616277998058752        HIP 50945  ...   NaN         5          59\n",
            "596    6680  5233181908011057536  TYC 8968-1201-1  ...   NaN         5          59\n",
            "597    6952  5239823782876560512   TYC 8965-577-1  ...   NaN         5          59\n",
            "598    7621  5237036555261723648        HIP 55616  ...   NaN         5          59\n",
            "599    8027  5238698467088998400        HIP 53913  ...   NaN         5          59\n",
            "600    8147  5239251727594949120   TYC 8969-867-1  ...   NaN         5          59\n",
            "601    8158  5239304538510338432   TYC 8965-388-1  ...   NaN         5          59\n",
            "602    8214  5239498739751922432   TYC 8965-411-1  ...   NaN         5          59\n",
            "603    8221  5239525196750143616  TYC 8966-1241-1  ...  5.07         5          59\n",
            "604    8248  5239626420542800512  TYC 8965-1276-1  ...   NaN         5          59\n",
            "605    8251  5239637759256457472        HIP 53016  ...   NaN         5          59\n",
            "606    8253  5239660367966484736   TYC 8965-604-1  ...   NaN         5          59\n",
            "607    8259  5239689092704584704        HIP 52221  ...   NaN         5          59\n",
            "608    8260  5239701565287189120   TYC 8965-163-1  ...  3.58         5          59\n",
            "609    8265  5239725548384560128   TYC 8965-414-1  ...   NaN         5          59\n",
            "610    8268  5239736199905884416        HIP 52171  ...   NaN         5          59\n",
            "611    8270  5239740804110817664        HIP 52132  ...   NaN         5          59\n",
            "612    8272  5239772689945600128        HIP 52261  ...   NaN         5          59\n",
            "613    8274  5239789148260273792        HIP 52116  ...   NaN         5          59\n",
            "614    8277  5239801689564803072    TYC 8965-56-1  ...   NaN         5          59\n",
            "615    8279  5239809557944885888   TYC 8965-471-1  ...   NaN         5          59\n",
            "616    8281  5239843196128730368   TYC 8965-688-1  ...   NaN         5          59\n",
            "617    8282  5239849896277704960   TYC 8965-308-1  ...   NaN         5          59\n",
            "618    8283  5239858726733859968   TYC 8965-602-1  ...   NaN         5          59\n",
            "619    8284  5239869103371472000        HIP 52293  ...   NaN         5          59\n",
            "620    8285  5239883946781824256        HIP 52328  ...   NaN         5          59\n",
            "621    8286  5239891677722958976    TYC 8965-25-1  ...  1.56         5          59\n",
            "622    8287  5239895629092870144        HIP 52160  ...   NaN         5          59\n",
            "623    8292  5239926827735288960   TYC 8965-390-1  ...   NaN         5          59\n",
            "624    8376  5240861412615531136        HIP 53992  ...   NaN         5          59\n",
            "625    8382  5240380376282066816        HIP 54168  ...   NaN         5          59\n",
            "626    8564  5241066608973054080   TYC 8966-857-1  ...   NaN         5          59\n",
            "627    8567  5241082311374967296   TYC 8966-142-1  ...   NaN         5          59\n",
            "628    8576  5241109696086432640   TYC 8966-637-1  ...   NaN         5          59\n",
            "629    8577  5241109867885123328   TYC 8966-734-1  ...   NaN         5          59\n",
            "630    8582  5241132579670834816        HIP 53330  ...   NaN         5          59\n",
            "631    8636  5241357189281206656        HIP 52867  ...   NaN         5          59\n",
            "632    8968  5242010093028921856  TYC 8957-2463-1  ...   NaN         5          59\n",
            "633    9476  5244381327293536768  TYC 8954-1636-1  ...   NaN         5          59\n",
            "634    9604  5244883529229180928  TYC 9210-1484-1  ...   NaN         5          59\n",
            "635    9685  5245270626044873344  TYC 8968-1187-1  ...   NaN         5          59\n",
            "636    9738  5245462112865217024        HIP 50612  ...   NaN         5          59\n",
            "637    9927  5246170163993645056        HIP 49726  ...   NaN         5          59\n",
            "638   10027  5246562414765401472        HIP 49360  ...   NaN         5          59\n",
            "\n",
            "[59 rows x 14 columns]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W4SjoFY88CKe",
        "outputId": "ad4efea9-0c6b-4c78-e3fd-60f25a4522b5"
      },
      "source": [
        "print(len(coma_ber))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "EWaGv109pfxy",
        "outputId": "f8722382-d3dc-4849-b12d-5b421b778b5c"
      },
      "source": [
        "cm = plt.cm.get_cmap(\"PuBu\") #provides the colormap\n",
        "plt.scatter(Color, abs_mag, c=Color, s=35, cmap=cm) #makes the scatter plot an dplots the columns point\n",
        "plt.xlabel(\"Color\")\n",
        "plt.ylabel(\"Absolute Magnitude\")\n",
        "plt.title(\"Color Maginitude Diagram of Coma Ber\")\n",
        "plt.gca().invert_yaxis()\n",
        "plt.show() #shows the plot"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BhmpitgKpfx0"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F5I3F1Rnpfx2"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BgLYth7Xpfx4"
      },
      "source": [
        "### Coding Challenge 1: Add the sun to your color magnitude diagram"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LlroU_R9pfx4"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_tG61iyepfx6"
      },
      "source": [
        "### Coding Challenge 2: Add a colormap to your diagram"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M-_pH6SLpfx7"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IuWfhZKKpfx9"
      },
      "source": [
        "### Coding Challenge 3: Create histograms for the absolute magnitude and color of your star cluster"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1uOX064Vpfx9"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "krVPClPCjW0B"
      },
      "source": [
        "## 🟢Mini Project (Bonus): The Cultural-Societal Impact of the Lack of Access to Home Broadband\n",
        "\n",
        "Electromagnetic waves that have wavelengths that are larger than 1mm in length are typically called radio waves. These wavelengths are used for communication between mobile phones, radio stations, Bluetooth devices, and of course radio stations.\n",
        "\n",
        "Radio astronomers developed an understanding of radio waves, which provided huge advantage for the development of the high-speed WI-FI standard. In the early 1990’s, WI-FI speed was limited by errors created from the signal bouncing and echoing off walls and objects of a room. This problem was made worse when a lot of information was sent across a single pure tone (single frequency) sine-like radio waves, limiting the possible data WI-FI data rate. However, it was found that by spreading the load of information across the radio band, the echo was reduced. It was not until the mid 2000s that this standard had become main-stream in WI-FI technology.\n",
        "\n",
        "\n",
        "In modern times, Wi-Fi is crucial to everyday activities whether it be work, school, or retail. But, who has access to Wi-Fi and who doesn't? Create a dataframe using the following access-based-on-income vs. time data, and create a scatter plot that visualizes how they compare.\n",
        "\n",
        "Source: https://www.pewresearch.org/internet/fact-sheet/internet-broadband/?menuItem=2ab2b0be-6364-4d3a-8db7-ae134dbc05cd"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SaMWq2_-jW0B"
      },
      "source": [
        "#Import necessary libraries"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1pdnSV2QjW0B"
      },
      "source": [
        "#Read in data."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wzN1Hdm9jW0B"
      },
      "source": [
        "#Store column data in variables."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PLi-MiKqjW0C"
      },
      "source": [
        "#Plot information\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vp9O0tYljW0C"
      },
      "source": [
        "In your presentation, share your created visualizations above and your answers to the following questions along with any thoughts you have about the mini project.\n",
        "\n",
        "Answer the following questions:\n",
        "\n",
        "1. What income group of households has the greatest access to internet? The smallest?\n",
        "\n",
        "2. True or False: Equality exists because everyone has the opportunity to pay for internet access in their household. <br> Explain your thoughts.\n",
        "\n",
        "3. What are some ways that we can use our computer science skills to boost access of lower-income households to a stable high-speed internet connection?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LJDfOFXJjW0C"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}